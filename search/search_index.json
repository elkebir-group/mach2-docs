{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#mach2-documentation","title":"MACH2 Documentation","text":"<ul> <li>MACH2: A mathematical framework for inferring migration histories of metastatic cancer from clone phylogeny and the location of extant clones.</li> <li>MACH2-Viz: An interactive visual application for exploring metastasis patterns</li> </ul> <p>Image: Clone tree labeled by MACH2 (left) and inferred migration graph for Ovarian cancer (right) (data from McPherson et. al., 2016)</p>"},{"location":"#quick-start","title":"Quick Start","text":"<ul> <li>Basic Features</li> <li>Installation</li> <li>Quick Start Guide</li> </ul>"},{"location":"#tutorial","title":"Tutorial","text":"<ul> <li>Documentation</li> <li>Examples</li> </ul>"},{"location":"feature/","title":"Features","text":""},{"location":"feature/#mach2-features","title":"MACH2 Features","text":"<p>MACH2 infers migration histories of metastatic cancers given the clonal phylogeny and the location of extant clones.</p> <p>MACH2 takes as input the following:</p> <ol> <li>Input tree file : Tree file describing the input clone tree.</li> <li>Leaf labeling file : Labeling file describing the leaf labeling of input clone tree.</li> </ol> <p>And returns output in one of the following formats:</p> <ol> <li>Refined tree file : Tree file describing the output refined tree.</li> <li>Vertex labeling file : Labeling file describing the vertex labeling of the refined tree. Labels designate the anatomical location of each node.</li> <li>Refined tree DOT : Refined tree with vertex labeling in DOT format.</li> <li>Migration graph file : Multi-graph file describing the migration graph.</li> <li>Migration graph DOT : Migration graph in DOT format.</li> </ol>"},{"location":"feature/#mach2-viz-features","title":"MACH2-Viz Features","text":"<p>MACH2-Viz is an interactive visualizer that allows the user to explore migration patters inferred by MACH2. It has the following features.</p> <ul> <li>Highlight corresponding nodes: The user can highlight nodes in the clonal tree or migration graph, and nodes in the corresponding structure will highlight as well.</li> <li>Compare solutions: Users can open solutions side by side and compare them.</li> <li>Require or omit migrations: A summary panel can be opened and migration edges can be required or omitted from the list of solutions displayed.</li> <li>Examine polytomy refinement: The input clonal phylogeny can be compared against the refined phylogeny and corresponding nodes can be panned to and comapred.</li> <li>Extensibility: Users can upload their own solutions or make contributions to the home page table of example solutions.</li> <li>Backwards compatibility: Solutions from MACHINA (2018) can also be loaded into the visualizer.</li> </ul>"},{"location":"installation/","title":"Installation Guide","text":""},{"location":"installation/#prerequisites","title":"Prerequisites","text":"<ul> <li>Python - <code>MACH2</code> requires Python 3.7 or newer.</li> <li>ILP solver - <code>MACH2</code> requires an ILP solver installed to solve PMH-TR. Currently <code>MACH2</code> only supports <code>Gurobi optimizer</code>, but we are going to add support for more ILP solvers in the future. <code>MACH2</code> requires a valid Gurobi installation and license key. The location of Gurobi should be present in <code>LD_LIBRARY_PATH</code> (linux) and <code>DYLD_LIBRARY_PATH</code> (macOS) the license key should be saved in the environment variable <code>GRB_LICENSE_KEY</code>.</li> </ul>"},{"location":"installation/#installing-mach2","title":"Installing MACH2","text":"<p>MACH2 can be installed using the following command:</p> <pre><code>pip install mach2 &amp;&amp; pip install mach2[jupyter]\n</code></pre>"},{"location":"installation/#mach2-viz","title":"MACH2-Viz","text":"<p>MACH2-Viz can simply be opened with the following link. However, there is a Python package that allows for opening MACH2-Viz in localhost directly from a Python script or Jupyter Notebook.  </p> <p>The package will be installed as a dependency when MACH2 is installed, but to install the Python package for MACH2-Viz alone, run:</p> <pre><code>pip install mach2-viz\n</code></pre>"},{"location":"quickstart/","title":"Quick Start","text":"<p>NOTE: This tutorial is better followed on a Jupyter Notebook. To use a Jupyter notebook, be sure to install MACH2 for Jupyter Notebook.</p> <p>Now that you have MACH2 and MACH2-Viz set up, you can run the following on this example dataset.</p> <ul> <li>patient1.tree</li> <li>patient1.labeling</li> </ul>"},{"location":"quickstart/#input-description","title":"Input Description","text":"<p><code>patient1.tree</code> is the edgelist of the clone phylogeny to be labeled by MACH2, and <code>patient1.labeling</code> is a labeling of extant nodes (otherwise known as the leaves of the phylogeny) designating an anatomical location for these clones. As you can see, these are in tsv format, as columns can be separated by tabs or spaces.</p>"},{"location":"quickstart/#visualizing-the-tree","title":"Visualizing the Tree","text":"<p>We visualize the tree through the following lines of Python code:</p> <p><code>In[1]:</code></p> <pre><code>import mach2\ntree = mach2.Phylogeny.from_file('patient1.tree', 'patient1.labeling')\ntree\n</code></pre> <p><code>Out[1]</code>:</p> <p></p>"},{"location":"quickstart/#computing-a-full-labeling","title":"Computing a Full Labeling","text":"<p>NOTE: Computing a full labeling using MACH2 requires an ILP solver such as Gurobi, make sure to have it installed.</p> <p>To solve the PMH-TR (Parsimonious Migration History with Tree Resolution) problem, you can run the following code:</p> <p><code>In[2]</code>:</p> <pre><code>solver = mach2.MACH(tree, primary_site='LOv')\nsolutions = solver.solve('gurobi', 30, n_threads=30)\n</code></pre> <p><code>Out[2]</code>:</p> <pre><code>Set parameter MIPGap to value 0\nSet parameter PoolSolutions to value 30\nSet parameter PoolSearchMode to value 2\nSet parameter Threads to value 30\n</code></pre>"},{"location":"quickstart/#visualizing-solutions","title":"Visualizing Solutions","text":"<p>You can visualize solutions using class methods in MACH2's library. Let's visualize the first solution returned by MACH2:</p>"},{"location":"quickstart/#visualizing-the-clone-tree","title":"Visualizing the Clone Tree","text":"<p><code>In[3]</code></p> <pre><code>solutions[0].phylogeny\n</code></pre> <p><code>Out[3]</code></p> <p></p>"},{"location":"quickstart/#visualizing-the-migration-graph","title":"Visualizing the Migration Graph","text":"<p><code>In[4]</code></p> <pre><code>solutions[0].migration_graph\n</code></pre> <p><code>Out[4]</code></p> <p></p>"},{"location":"quickstart/#opening-mach2-viz","title":"Opening MACH2-Viz","text":"<p>MACH2-Viz can be opened directly from the Jupyter Notebook via localhost through the following code</p> <p><code>In[5]</code></p> <pre><code>solutions.open_in_viz()\n</code></pre> <p>A browser window should open and display an interactive visualization of the solution space.</p>"},{"location":"tutorial/","title":"MACH2/MACH2-Viz Documentation","text":""},{"location":"tutorial/#documentation","title":"Documentation","text":"<p>To get started, see the quick start tutorial. Then, view the documentation below.</p>"},{"location":"tutorial/#mach2-documentation","title":"MACH2 Documentation","text":"<ul> <li>Input Files</li> <li>Command Line Usage</li> <li>Python API Usage<ul> <li>MACH</li> <li>MigrationGraph</li> <li>Phylogeny</li> <li>RefinedPhylogeny</li> <li>SolutionSet</li> </ul> </li> </ul>"},{"location":"tutorial/#mach2-viz-documentation","title":"MACH2-Viz Documentation","text":"<ul> <li>Getting Started</li> <li>Data Preparation</li> <li>Navigating the Visualizer</li> <li>Comparing Solutions</li> <li>Examining Polytomy</li> <li>Summary View</li> </ul>"},{"location":"docs/cmdline/","title":"MACH2 Command Line Usage","text":"<p>(Back)</p> <p>Along with the Jupyter Notebook/Python API usage described in the quick start guide, MACH2 can be run in command line in all platforms with Python installed.</p>"},{"location":"docs/cmdline/#input","title":"Input","text":"<p>To run MACH2 in command line, you will need the following files:</p> <ul> <li>Input tree file: Tree file describing the input clone tree. This is an edgelist file that follows a tsv format. (Example)</li> <li>Leaf labeling file: Labeling file describing the leaf labeling of input clone tree. It is in the form of a two-column csv where the first column is a node id and the second column is an anatomic labeling. (Example)</li> <li>(Optional) Coloring file: An integer mapping for anatomical locations. For visualization purposes. (Example)</li> </ul>"},{"location":"docs/cmdline/#usage","title":"Usage","text":"<pre><code>    usage: mach2 [-h] [-p PRIMARY] [-c COLORMAP] [--log] [-o OUTPUT] [-N NSOLUTIONS] [-C] [-t THREADS] [-s] [-S] clone_tree leaf_labeling\n\n    MACH2\n\n    positional arguments:\n    clone_tree            Input clone tree\n    leaf_labeling         Input leaf labeling\n\n    options:\n    -h, --help            show this help message and exit\n    -p PRIMARY, --primary PRIMARY\n                            Primary anatomical site\n    -c COLORMAP, --colormap COLORMAP\n                            Color map file\n    --log                 Outputs Gurobi logging\n    -o OUTPUT, --output OUTPUT\n                            Output folder\n    -N NSOLUTIONS, --nsolutions NSOLUTIONS\n                            Maximum number of solutions retained\n    -C, --count_solutions\n                            Only prints the number of solutions (default=False)\n    -t THREADS, --threads THREADS\n                            Number of threads\n    -s, --suboptimal      Returns suboptimal solutions without duplicates, may be slow (default=False)\n    -S, --seeding_sites   Minimizes the number of seeding sites too (default=False)\n</code></pre>"},{"location":"docs/cmdline/#example","title":"Example","text":"<pre><code>mach2 data/mcpherson_2016/patient1.tree data/mcpherson_2016/patient1.labeling -c data/mcpherson_2016/coloring.txt\n</code></pre>"},{"location":"docs/inputs/","title":"Inputs","text":""},{"location":"docs/inputs/#input-files","title":"Input Files","text":"<p>(Back)</p>"},{"location":"docs/inputs/#tree-file","title":"Tree File","text":"<p>MACH2 requires a file describing the input clonal phylogeny. This is in the form of an edgelist describing a tree (this means that there must not be multiple components or cycles in the edgelist). This is in a tsv formatted file with two columns. Entries are separated by spaces. See the example below:</p> <pre><code>A A1\nA A2\nA A3\nA A4\nA A5\nA A6\nB B1\nB B2\nB B3\nB B4\nB B5\nD D1\nF F1\nH H1\nH H2\nA B\nA D\nB C1\nD F\nD E1\nF H\nF G1\nH I1\n</code></pre> <p>(McPherson 2016, Ovarian Cancer)</p>"},{"location":"docs/inputs/#labeling-file","title":"Labeling File","text":"<p>MACH2 also requires a file that labels extant nodes (otherwise known as the leaves) of the phylogenetic tree. This is a two column dataset where elements in the same row are separated by spaces (similar to a tsv). Column 1 is the node id in the phylogeny and Column 2 is the anatomical labeling. See below for an example:</p> <pre><code>A1 Om\nA2 SBwl\nA3 LFTB\nA4 LOv\nA5 ApC\nA6 RFTA\nB1 Om\nB2 SBwl\nB3 LFTB\nB4 LOv\nB5 ApC\nC1 SBwl\nD1 LOv\nE1 ROv\nF1 ROv\nG1 ROv\nH1 ROv\nH2 LOv\nI1 ROv\n</code></pre>"},{"location":"docs/inputs/#optional-coloring-file","title":"(Optional) Coloring File","text":"<p>When running MACH2 from the command line, a coloring file may be used for integer assignments (colors) for anatomical locations. The file looks like the one below. Note how Column 1 contains values from Column 2 of the labelling file.</p> <pre><code>LOv 1\nAdnx 2\nROv 3\nApC 7\nBm 8\nBrn 2\nBwl 7\nCDSB 5\nClnE 9\nLFT 7\nLFTC 7\nLFTB 9\nLPv 7\nOm 8\nRFTA 4\nRPv 4\nRUt 5\nSBwl 5\n</code></pre>"},{"location":"docs/python_mach2/","title":"MACH2 Python Usage","text":"<p>(back)</p> <p>Along with running via command line, you can compute migration histories using the Python API. Suppose you have a clone tree file <code>patient.tree</code> and an anatomical labeling of the leaves/extant nodes of the tree <code>patient.labeling</code>. For more information on the input files required for MACH2, see here.</p>"},{"location":"docs/python_mach2/#1-load-the-data","title":"1. Load the Data","text":"<p>Data can be loaded through the following Python code:</p> <pre><code>import mach2\n\ntree = mach2.Phylogeny.from_file('patient.tree', 'patient.labeling') #(1)\n</code></pre> <ol> <li>This line creates a <code>Phylogeny</code> object storing the leaf-labeled tree. In the next section we will solve this tree by labeling the internal nodes.</li> </ol>"},{"location":"docs/python_mach2/#2-compute-the-solution","title":"2. Compute the Solution","text":"<p>This is simply done with the following code:</p> <pre><code>solver = mach2.MACH(tree, primary_site=None)  #(1)\nsolutions = solver.solve('gurobi', 30, n_threads=30) #(2)\n</code></pre> <ol> <li>Optionally, you can specify a primary tumor location in the form of a string. If the primary location is <code>None</code>, then all solutions across multiple possible primary tumor locations will be returned.</li> <li>This creates a <code>SolutionSet</code> object that contains all possible labeled trees. An ILP solver like Gurobi is required to compute these solutions, so be sure to have that installed.</li> </ol>"},{"location":"docs/python_mach2/#3-exporting-solutions","title":"3. Exporting Solutions","text":"<p>Now that you have a Python object storing the solutions, you need to export it to a more readable format. This can be done in the following ways.</p>"},{"location":"docs/python_mach2/#exporting-to-json","title":"Exporting to JSON","text":"<p>This is done with the following line of code. This will result in a JSON similar in format to this example.</p> <pre><code>solutions.json('out.json') #(1)\n</code></pre> <ol> <li>Replace the filename with whatever you want.</li> </ol>"},{"location":"docs/python_mach2/#static-visualization","title":"Static Visualization","text":"<p>If you are using a Jupyter Notebook, you can return static visualizations. You can index into one of the solutions and generate visualizations through the following code.</p> <pre><code>solutions[0].phylogeny #(1)\nsolutions[0].migration_graph\n</code></pre> <ol> <li>Change the index depending on the solution you would like to view. To get the number of solutions simply run <code>len(solutions)</code></li> </ol> <p>This method is shown in this example.</p>"},{"location":"docs/python_mach2/#interactive-visualization-recommended","title":"Interactive Visualization (Recommended)","text":"<p>Interactive visualizations allow for filtration of solutions based on priors such as known migrations or absences of migrations. It also allows for examining polytomy resolution and visualilzation of the entire solution space. To open a visualization directly from Python, run the following snippet of code. You should see a window like this open up.</p> <pre><code>solutions.open_in_viz()\n</code></pre> <p>Alternatively, you can:</p> <ol> <li>Export the solution to JSON file</li> <li>Open the homepage of MACH2-Viz (link)</li> <li>Click the <code>+</code> icon at the bottom right and upload your file.</li> </ol>"},{"location":"docs/python_mach2/#python-api","title":"Python API","text":"<p>These methods are a part of the Python API. Please see the following objects for more information on the API:</p> <ul> <li>MACH</li> <li>MigrationGraph</li> <li>Phylogeny</li> <li>RefinedPhylogeny</li> <li>SolutionSet</li> </ul>"},{"location":"docs/api/mach/","title":"Mach","text":""},{"location":"docs/api/mach/#mach2mach","title":"<code>mach2.MACH</code>","text":"<p>(back)</p> <p>Solver object for MACH2</p>"},{"location":"docs/api/mach/#class-constructor","title":"Class Constructor","text":"<pre><code>mach2.MACH(\n    phylogeny,\n    primary_site=None,\n    suboptimal_mode=False,\n    seeding_site=False,\n    specify_migration_comigration=None,\n    possible_migration_list=None,\n    clones_observed=None)\n</code></pre>"},{"location":"docs/api/mach/#parameters","title":"Parameters","text":"<ul> <li><code>phylogeny (Phylogeny)</code>: The tree with unlabeled internal nodes</li> </ul>"},{"location":"docs/api/mach/#optional","title":"Optional","text":"<ul> <li><code>primary_site (str)</code>: The anatomical location of the primary site.</li> <li><code>suboptimal_mode (bool)</code>: Return suboptimal solutions as well.</li> <li><code>seeding_site (bool)</code>: TODO</li> <li><code>specify_migration_comigration (TODO)</code>: TODO</li> <li><code>possible_migration_list (list)</code>: Array of length-2 arrays containing strings representing anatomical locations. Constrains possible migrations in solution space.</li> <li><code>clones_observed (TODO)</code>: TODO</li> </ul>"},{"location":"docs/api/mach/#methods","title":"Methods","text":""},{"location":"docs/api/mach/#add_polytomy_resolution_compatibility_constraints","title":"<code>add_polytomy_resolution_compatibility_constraints()</code>","text":"<p>Updates the constraints for polytomy resolution.</p>"},{"location":"docs/api/mach/#add_constraints_for_z","title":"<code>add_constraints_for_z()</code>","text":"<p>TODO</p>"},{"location":"docs/api/mach/#add_constraints_for_z_b_r_suboptimal","title":"<code>add_constraints_for_z_b_R_suboptimal()</code>","text":"<p>TODO</p>"},{"location":"docs/api/mach/#add_constraints_for_q","title":"<code>add_constraints_for_q()</code>","text":"<p>TODO</p>"},{"location":"docs/api/mach/#add_constraints_for_q_suboptimal","title":"<code>add_constraints_for_q_suboptimal()</code>","text":"<p>TODO</p>"},{"location":"docs/api/mach/#add_constraints_binary","title":"<code>add_constraints_binary()</code>","text":"<p>TODO</p>"},{"location":"docs/api/mach/#add_primary_site_constraintsprimary_site","title":"<code>add_primary_site_constraints(primary_site)</code>","text":"<p>Dynamically the constraint on primary tumor location.</p>"},{"location":"docs/api/mach/#parameters_1","title":"Parameters","text":"<ul> <li><code>primary_site (str)</code>: Location of the primary tumor</li> </ul>"},{"location":"docs/api/mach/#add_contraints_specifying_mig_comig","title":"<code>add_contraints_specifying_mig_comig()</code>","text":"<p>TODO</p>"},{"location":"docs/api/mach/#solvesolver-nsolutions-logfile-n_threads0-rawfalse","title":"<code>solve(solver, nSolutions, logfile='', n_threads=0, raw=False)</code>","text":"<p>Solves the Parsimonious Migration History problem with Tree Resolution (PMH-TR) given the conditions specified in the class parameters.</p>"},{"location":"docs/api/mach/#parameters_2","title":"Parameters","text":"<ul> <li><code>solver (str)</code>: ILP solver to use. We currently only support Gurobi (<code>\"gurobi\"</code>), and hope to add support for more ILP solvers in the future.</li> <li><code>nSolutions (int)</code>: The number of solutions returned by MACH2</li> <li><code>n_threads (int)</code>: Number of threads to run in parallel.</li> <li><code>raw (bool/object)</code>: Raw data describing the solution set. If the user just needs to cast the solution data, then raw data can be passed in without necessarily running MACH2</li> </ul>"},{"location":"docs/api/migrationgraph/","title":"Migrationgraph","text":""},{"location":"docs/api/migrationgraph/#mach2migrationgraph","title":"<code>mach2.MigrationGraph</code>","text":"<p>(back)</p> <p>Data structure containing the migration graph.</p>"},{"location":"docs/api/migrationgraph/#constructor","title":"Constructor","text":"<pre><code>mach2.MigrationGraph(raw)\n</code></pre>"},{"location":"docs/api/migrationgraph/#parameters","title":"Parameters","text":"<ul> <li><code>raw</code>: Raw data describing the migration graph</li> </ul>"},{"location":"docs/api/migrationgraph/#methods","title":"Methods","text":""},{"location":"docs/api/migrationgraph/#has_migrationa-b-bool","title":"<code>has_migration(a, b)</code> (bool)","text":"<p>Returns whether a migration exists in the graph</p>"},{"location":"docs/api/migrationgraph/#parameters_1","title":"Parameters","text":"<ul> <li><code>a (str)</code>: Anatomical location where the migration is from</li> <li><code>b (str)</code>: Anatomical location where the migration is to</li> </ul>"},{"location":"docs/api/migrationgraph/#n_migrationsa-b-int","title":"<code>n_migrations(a, b)</code> (int)","text":"<p>Returns the number of such migrations that exist</p>"},{"location":"docs/api/migrationgraph/#parameters_2","title":"Parameters","text":"<ul> <li><code>a (str)</code>: Anatomical location where the migration is from</li> <li><code>b (str)</code>: Anatomical location where the migration is to</li> </ul>"},{"location":"docs/api/migrationgraph/#migration_edges-list","title":"<code>migration_edges()</code> (list)","text":"<p>Returns the number of edges in the migration graph.</p>"},{"location":"docs/api/migrationgraph/#migration_pattern-str","title":"<code>migration_pattern()</code> (str)","text":"<p>Returns the migration pattern shown in the graph as described by El-Kebir et. al. (2018) (<code>'m'</code>, <code>'p'</code>, <code>'S'</code>, <code>'M'</code>, <code>'R'</code>)</p>"},{"location":"docs/api/migrationgraph/#write_graphfilename","title":"<code>write_graph(filename)</code>","text":"<p>Writes the graph into an edgelist format where rows are separated by spaces.</p>"},{"location":"docs/api/migrationgraph/#parameters_3","title":"Parameters","text":"<ul> <li><code>filename (str)</code>: File being written to</li> </ul>"},{"location":"docs/api/migrationgraph/#drawcolormapnone-colormap_filenone-graphvizdigraph","title":"<code>draw(colormap=None, colormap_file=None)</code> (graphviz.DiGraph)","text":"<p>Constructs a visualization object of the migration graph</p>"},{"location":"docs/api/migrationgraph/#parameters_4","title":"Parameters","text":"<ul> <li><code>colormap (dict)</code>: Dictionary mapping node ids to colors</li> <li><code>colormap_file (str)</code>: Filename of a color mapping</li> </ul>"},{"location":"docs/api/migrationgraph/#write_dotcolormapnone-colormap_filenone","title":"<code>write_dot(colormap=None, colormap_file=None)</code>","text":"<p>Create a graph vizualization in DOT file format</p>"},{"location":"docs/api/migrationgraph/#parameters_5","title":"Parameters","text":"<ul> <li><code>colormap (dict)</code>: Dictionary mapping node ids to colors</li> <li><code>colormap_file (str)</code>: Filename of a color mapping</li> </ul>"},{"location":"docs/api/phylogeny/","title":"Phylogeny","text":""},{"location":"docs/api/phylogeny/#mach2phylogeny","title":"<code>mach2.Phylogeny</code>","text":"<p>(back)</p> <p>Data structure containing the clone phylogeny with only leaf-labelings (i.e. the input tree).</p>"},{"location":"docs/api/phylogeny/#constructor","title":"Constructor","text":"<pre><code>mach2.Phylogeny(edges, labels, colormap = None)\n</code></pre>"},{"location":"docs/api/phylogeny/#parameters","title":"Parameters","text":"<ul> <li><code>edges (list[tuple[str, str]])</code>: The edgelist of the phylogeny</li> <li><code>labels (dict[str, str])</code>: The labeling of the leaves</li> </ul>"},{"location":"docs/api/phylogeny/#optional","title":"Optional","text":"<ul> <li><code>colormap (dict[str, int])</code>: Mapping of node ids to color indices</li> </ul>"},{"location":"docs/api/phylogeny/#methods","title":"Methods","text":""},{"location":"docs/api/phylogeny/#from_filephylogeny_filename-labeling_filename-colormap_filenone","title":"<code>from_file(phylogeny_filename, labeling_filename, colormap_file=None)</code>","text":"<p>Returns a phylogeny constructed from edgelist and labeling files. Files are described here.</p>"},{"location":"docs/api/phylogeny/#parameters_1","title":"Parameters","text":"<ul> <li><code>phylogeny_filename (str)</code>: The filename of the edgelist</li> <li><code>labeling_filename (str)</code>: The labeling filename</li> <li><code>colormap_file (str)</code>: The color map filename</li> </ul>"},{"location":"docs/api/phylogeny/#from_pandasphylogeny_df-labeling_df","title":"<code>from_pandas(phylogeny_df, labeling_df)</code>","text":"<p>Similarly, constructs a phylogeny from an edgelist and labeling Pandas 2-column dataframes.</p>"},{"location":"docs/api/phylogeny/#parameters_2","title":"Parameters","text":"<ul> <li><code>phylogeny_filename (str)</code>: The dataframe of the edgelist</li> <li><code>labeling_filename (str)</code>: The labeling dataframe</li> </ul>"},{"location":"docs/api/phylogeny/#get_labelnode-str","title":"<code>get_label(node)</code> (str)","text":"<p>Returns the anatomical location of a node. Throws a <code>ValueError</code> if the node is unlabeled.</p>"},{"location":"docs/api/phylogeny/#parameters_3","title":"Parameters","text":"<ul> <li><code>node (str)</code>: The node id in the phylogeny</li> </ul>"},{"location":"docs/api/phylogeny/#get_parent_arcnode-tuplestr-str","title":"<code>get_parent_arc(node)</code> (tuple[str, str])","text":"<p>Returns the parent edge leading to the node <code>(parent_id, node_id)</code>.</p>"},{"location":"docs/api/phylogeny/#parameters_4","title":"Parameters","text":"<ul> <li><code>node (str)</code>: The node id in the phylogeny</li> </ul>"},{"location":"docs/api/phylogeny/#get_children_arcsnode-listtuplestr-str","title":"<code>get_children_arcs(node)</code> (list[tuple[str, str]])","text":"<p>Get edges going to children nodes.</p>"},{"location":"docs/api/phylogeny/#parameters_5","title":"Parameters","text":"<ul> <li><code>node (str)</code>: The node id in the phylogeny</li> </ul>"},{"location":"docs/api/phylogeny/#write_treefilename","title":"<code>write_tree(filename)</code>","text":"<p>Write the tree to an edgelist file</p>"},{"location":"docs/api/phylogeny/#parameters_6","title":"Parameters","text":"<ul> <li><code>filename (str)</code> The name of the file being written to</li> </ul>"},{"location":"docs/api/phylogeny/#write_labelingfilename","title":"<code>write_labeling(filename)</code>","text":"<p>Write the node labeling to file (of nodes that have labelings)</p>"},{"location":"docs/api/phylogeny/#parameters_7","title":"Parameters","text":"<ul> <li><code>filename (str)</code> The name of the file being written to</li> </ul>"},{"location":"docs/api/phylogeny/#write_dotfilename-colormapnone-colormap_filenone","title":"<code>write_dot(filename, colormap=None, colormap_file=None)</code>","text":"<p>Write a DOT format visualization of the tree.</p>"},{"location":"docs/api/phylogeny/#parameters_8","title":"Parameters","text":"<ul> <li><code>filename (str)</code>: The name of the file being written to</li> <li><code>colormap (dict[str, int])</code>: A mapping between anatomic label to color index</li> <li><code>colormap_file (str)</code>: The coloring file, if a file is being passed instead of colormap data</li> </ul>"},{"location":"docs/api/phylogeny/#drawcolormap-colormap_file-graphvizdigraph","title":"<code>draw(colormap, colormap_file)</code> (graphviz.DiGraph)","text":"<p>Returns a visualization object of the phylogeny</p>"},{"location":"docs/api/phylogeny/#parameters_9","title":"Parameters","text":"<ul> <li><code>colormap (dict[str, int])</code>: A mapping between anatomic label to color index</li> <li><code>colormap_file (str)</code>: The coloring file, if a file is being passed instead of colormap data</li> </ul>"},{"location":"docs/api/refinedphylogeny/","title":"Refinedphylogeny","text":""},{"location":"docs/api/refinedphylogeny/#mach2refinedphylogeny","title":"<code>mach2.RefinedPhylogeny</code>","text":"<p>(back)</p> <p>Data structure containing the clone phylogeny with a full labeling and polytomy resolution (i.e. the output tree).</p> <p>NOTE: <code>RefinedPhylogeny</code> inherits the <code>Phylogeny</code> object, so public methods from <code>Phylogeny</code> are callable from <code>RefinedPhylogeny</code> as well.</p>"},{"location":"docs/api/refinedphylogeny/#constructor","title":"Constructor","text":"<pre><code>mach2.RefinedPhylogeny(phylogeny, raw)\n</code></pre>"},{"location":"docs/api/refinedphylogeny/#parameters","title":"Parameters","text":"<ul> <li><code>phylogeny (mach2.Phylogeny)</code>: Phylogeny before refinement</li> <li><code>raw (dict)</code>: Raw solutions returned by <code>MACH.solve()</code></li> </ul>"},{"location":"docs/api/refinedphylogeny/#methods","title":"Methods","text":""},{"location":"docs/api/refinedphylogeny/#infer_timestamps","title":"<code>infer_timestamps()</code>","text":"<p>Infers temporal integer labelings for when the mutated clone arose. Each clone is labeled with a natural number where a higher number means that the clone arose later in time.</p>"},{"location":"docs/api/refinedphylogeny/#write_treefilename","title":"<code>write_tree(filename)</code>","text":"<p>Write the tree to an edgelist file</p>"},{"location":"docs/api/refinedphylogeny/#parameters_1","title":"Parameters","text":"<ul> <li><code>filename (str)</code> The name of the file being written to</li> </ul>"},{"location":"docs/api/refinedphylogeny/#write_labelingfilename","title":"<code>write_labeling(filename)</code>","text":"<p>Write the node labeling to file</p>"},{"location":"docs/api/refinedphylogeny/#parameters_2","title":"Parameters","text":"<ul> <li><code>filename (str)</code> The name of the file being written to</li> </ul>"},{"location":"docs/api/refinedphylogeny/#write_dotfilename-colormapnone-colormap_filenone","title":"<code>write_dot(filename, colormap=None, colormap_file=None)</code>","text":"<p>Write a DOT format visualization of the tree.</p>"},{"location":"docs/api/refinedphylogeny/#parameters_3","title":"Parameters","text":"<ul> <li><code>filename (str)</code>: The name of the file being written to</li> <li><code>colormap (dict[str, int])</code>: A mapping between anatomic label to color index</li> <li><code>colormap_file (str)</code>: The coloring file, if a file is being passed instead of colormap data</li> </ul>"},{"location":"docs/api/refinedphylogeny/#drawcolormap-colormap_file-graphvizdigraph","title":"<code>draw(colormap, colormap_file)</code> (graphviz.DiGraph)","text":"<p>Returns a visualization object of the phylogeny</p>"},{"location":"docs/api/refinedphylogeny/#parameters_4","title":"Parameters","text":"<ul> <li><code>colormap (dict[str, int])</code>: A mapping between anatomic label to color index</li> <li><code>colormap_file (str)</code>: The coloring file, if a file is being passed instead of colormap data</li> </ul>"},{"location":"docs/api/solutionset/","title":"<code>mach2.SolutionSet</code>","text":"<p>Object containg a set of solutions (a refined phylogeny and a migration graph). This is returned by <code>mach2.MACH.solve</code></p>"}]}