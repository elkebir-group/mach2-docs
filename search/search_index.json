{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"MACH2 Documentation MACH2 : A mathematical framework for inferring migration histories of metastatic cancer from clone phylogeny and the location of extant clones. MACH2-Viz : An interactive visual application for exploring metastasis patterns Image: Clone tree labeled by MACH2 (left) and inferred migration graph for Ovarian cancer (right) (data from McPherson et. al., 2016) Quick Start Basic Features Installation","title":"Home"},{"location":"#mach2-documentation","text":"MACH2 : A mathematical framework for inferring migration histories of metastatic cancer from clone phylogeny and the location of extant clones. MACH2-Viz : An interactive visual application for exploring metastasis patterns Image: Clone tree labeled by MACH2 (left) and inferred migration graph for Ovarian cancer (right) (data from McPherson et. al., 2016)","title":" MACH2 Documentation"},{"location":"#quick-start","text":"Basic Features Installation","title":"Quick Start"},{"location":"feature/","text":"Features MACH2 Features MACH2 infers migration histories of metastatic cancers given the clonal phylogeny and the location of extant clones. MACH2 takes as input the following: Input tree file : Tree file describing the input clone tree. Leaf labeling file : Labeling file describing the leaf labeling of input clone tree. And returns output in one of the following formats: Refined tree file : Tree file describing the output refined tree. Vertex labeling file : Labeling file describing the vertex labeling of the refined tree. Labels designate the anatomical location of each node. Refined tree DOT : Refined tree with vertex labeling in DOT format. Migration graph file : Multi-graph file describing the migration graph. Migration graph DOT : Migration graph in DOT format. MACH2-Viz Features MACH2-Viz is an interactive visualizer that allows the user to explore migration patters inferred by MACH2. It has the following features. Highlight corresponding nodes : The user can highlight nodes in the clonal tree or migration graph, and nodes in the corresponding structure will highlight as well. Compare solutions : Users can open solutions side by side and compare them. Require or omit migrations : A summary panel can be opened and migration edges can be required or omitted from the list of solutions displayed. Examine polytomy refinement : The input clonal phylogeny can be compared against the refined phylogeny and corresponding nodes can be panned to and comapred. Extensibility : Users can upload their own solutions or make contributions to the home page table of example solutions. Backwards compatibility : Solutions from MACHINA (2018) can also be loaded into the visualizer.","title":"Basic Features"},{"location":"feature/#features","text":"","title":"Features"},{"location":"feature/#mach2-features","text":"MACH2 infers migration histories of metastatic cancers given the clonal phylogeny and the location of extant clones. MACH2 takes as input the following: Input tree file : Tree file describing the input clone tree. Leaf labeling file : Labeling file describing the leaf labeling of input clone tree. And returns output in one of the following formats: Refined tree file : Tree file describing the output refined tree. Vertex labeling file : Labeling file describing the vertex labeling of the refined tree. Labels designate the anatomical location of each node. Refined tree DOT : Refined tree with vertex labeling in DOT format. Migration graph file : Multi-graph file describing the migration graph. Migration graph DOT : Migration graph in DOT format.","title":"MACH2 Features"},{"location":"feature/#mach2-viz-features","text":"MACH2-Viz is an interactive visualizer that allows the user to explore migration patters inferred by MACH2. It has the following features. Highlight corresponding nodes : The user can highlight nodes in the clonal tree or migration graph, and nodes in the corresponding structure will highlight as well. Compare solutions : Users can open solutions side by side and compare them. Require or omit migrations : A summary panel can be opened and migration edges can be required or omitted from the list of solutions displayed. Examine polytomy refinement : The input clonal phylogeny can be compared against the refined phylogeny and corresponding nodes can be panned to and comapred. Extensibility : Users can upload their own solutions or make contributions to the home page table of example solutions. Backwards compatibility : Solutions from MACHINA (2018) can also be loaded into the visualizer.","title":"MACH2-Viz Features"},{"location":"installation/","text":"Installation Guide Prerequisites Python - MACH2 requires Python 3.7 or newer. ILP solver - MACH2 requires an ILP solver installed to solve PMH-TR . Currently MACH2 only supports Gurobi optimizer , but we are going to add support for more ILP solvers in the future. MACH2 requires a valid Gurobi installation and license key. The location of Gurobi should be present in LD_LIBRARY_PATH (linux) and DYLD_LIBRARY_PATH (macOS) the license key should be saved in the environment variable GRB_LICENSE_KEY . Installing MACH2 MACH2 can be installed using the following command: pip install mach2 && pip install mach2[jupyter] MACH2-Viz MACH2-Viz can simply be opened with the following link . However, there is a Python package that allows for opening MACH2-Viz in localhost directly from a Python script or Jupyter Notebook. The package will be installed as a dependency when MACH2 is installed, but to install the Python package for MACH2-Viz alone, run: pip install mach2-viz","title":"Installation"},{"location":"installation/#installation-guide","text":"","title":"Installation Guide"},{"location":"installation/#prerequisites","text":"Python - MACH2 requires Python 3.7 or newer. ILP solver - MACH2 requires an ILP solver installed to solve PMH-TR . Currently MACH2 only supports Gurobi optimizer , but we are going to add support for more ILP solvers in the future. MACH2 requires a valid Gurobi installation and license key. The location of Gurobi should be present in LD_LIBRARY_PATH (linux) and DYLD_LIBRARY_PATH (macOS) the license key should be saved in the environment variable GRB_LICENSE_KEY .","title":"Prerequisites"},{"location":"installation/#installing-mach2","text":"MACH2 can be installed using the following command: pip install mach2 && pip install mach2[jupyter]","title":"Installing MACH2"},{"location":"installation/#mach2-viz","text":"MACH2-Viz can simply be opened with the following link . However, there is a Python package that allows for opening MACH2-Viz in localhost directly from a Python script or Jupyter Notebook. The package will be installed as a dependency when MACH2 is installed, but to install the Python package for MACH2-Viz alone, run: pip install mach2-viz","title":"MACH2-Viz"},{"location":"quickstart/","text":"Quick Start NOTE: This tutorial is better followed on a Jupyter Notebook. To use a Jupyter notebook, be sure to install MACH2 for Jupyter Notebook. Now that you have MACH2 and MACH2-Viz set up, you can run the following on this example dataset. patient1.tree patient1.labeling Input Description patient1.tree is the edgelist of the clone phylogeny to be labeled by MACH2, and patient1.labeling is a labeling of extant nodes (otherwise known as the leaves of the phylogeny) designating an anatomical location for these clones. As you can see, these are in tsv format, as columns can be separated by tabs or spaces. Visualizing the Tree We visualize the tree through the following lines of Python code: In[1]: import mach2 tree = mach2.Phylogeny.from_file('patient1.tree', 'patient1.labeling') tree Out[1] : Computing a Full Labeling NOTE: Computing a full labeling using MACH2 requires an ILP solver such as Gurobi, make sure to have it installed. To solve the PMH-TR (Parsimonious Migration History with Tree Resolution) problem, you can run the following code: In[2] : solver = mach2.MACH(tree, primary_site='LOv') solutions = solver.solve('gurobi', 30, n_threads=30) Out[2] : Set parameter MIPGap to value 0 Set parameter PoolSolutions to value 30 Set parameter PoolSearchMode to value 2 Set parameter Threads to value 30 Visualizing Solutions You can visualize solutions using class methods in MACH2's library. Let's visualize the first solution returned by MACH2: Visualizing the Clone Tree In[3] solutions[0].phylogeny Out[3] Visualizing the Migration Graph In[4] solutions[0].migration_graph Out[4] Opening MACH2-Viz MACH2-Viz can be opened directly from the Jupyter Notebook via localhost through the following code In[5] solutions.open_in_viz() A browser window should open and display an interactive visualization of the solution space.","title":"Quick Start Guide"},{"location":"quickstart/#quick-start","text":"NOTE: This tutorial is better followed on a Jupyter Notebook. To use a Jupyter notebook, be sure to install MACH2 for Jupyter Notebook. Now that you have MACH2 and MACH2-Viz set up, you can run the following on this example dataset. patient1.tree patient1.labeling","title":"Quick Start"},{"location":"quickstart/#input-description","text":"patient1.tree is the edgelist of the clone phylogeny to be labeled by MACH2, and patient1.labeling is a labeling of extant nodes (otherwise known as the leaves of the phylogeny) designating an anatomical location for these clones. As you can see, these are in tsv format, as columns can be separated by tabs or spaces.","title":"Input Description"},{"location":"quickstart/#visualizing-the-tree","text":"We visualize the tree through the following lines of Python code: In[1]: import mach2 tree = mach2.Phylogeny.from_file('patient1.tree', 'patient1.labeling') tree Out[1] :","title":"Visualizing the Tree"},{"location":"quickstart/#computing-a-full-labeling","text":"NOTE: Computing a full labeling using MACH2 requires an ILP solver such as Gurobi, make sure to have it installed. To solve the PMH-TR (Parsimonious Migration History with Tree Resolution) problem, you can run the following code: In[2] : solver = mach2.MACH(tree, primary_site='LOv') solutions = solver.solve('gurobi', 30, n_threads=30) Out[2] : Set parameter MIPGap to value 0 Set parameter PoolSolutions to value 30 Set parameter PoolSearchMode to value 2 Set parameter Threads to value 30","title":"Computing a Full Labeling"},{"location":"quickstart/#visualizing-solutions","text":"You can visualize solutions using class methods in MACH2's library. Let's visualize the first solution returned by MACH2:","title":"Visualizing Solutions"},{"location":"quickstart/#visualizing-the-clone-tree","text":"In[3] solutions[0].phylogeny Out[3]","title":"Visualizing the Clone Tree"},{"location":"quickstart/#visualizing-the-migration-graph","text":"In[4] solutions[0].migration_graph Out[4]","title":"Visualizing the Migration Graph"},{"location":"quickstart/#opening-mach2-viz","text":"MACH2-Viz can be opened directly from the Jupyter Notebook via localhost through the following code In[5] solutions.open_in_viz() A browser window should open and display an interactive visualization of the solution space.","title":"Opening MACH2-Viz"}]}