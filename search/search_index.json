{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#mach2-documentation","title":"MACH2 Documentation","text":"<ul> <li>MACH2: A mathematical framework for inferring migration histories of metastatic cancer from clone phylogeny and the location of extant clones.</li> <li>MACH2-Viz: An interactive visual application for exploring metastasis patterns</li> </ul> <p>Image: Clone tree labeled by MACH2 (left) and inferred migration graph for Ovarian cancer (right) (data from McPherson et. al., 2016)</p>"},{"location":"#quick-start","title":"Quick Start","text":"<ul> <li>Basic Features</li> <li>Installation</li> <li>Quick Start Guide</li> </ul>"},{"location":"#tutorial","title":"Tutorial","text":"<ul> <li>Documentation</li> <li>Examples</li> </ul>"},{"location":"feature/","title":"Features","text":""},{"location":"feature/#mach2-features","title":"MACH2 Features","text":"<p>MACH2 infers migration histories of metastatic cancers given the clonal phylogeny and the location of extant clones.</p> <p>MACH2 takes as input the following:</p> <ol> <li>Input tree file : Tree file describing the input clone tree.</li> <li>Leaf labeling file : Labeling file describing the leaf labeling of input clone tree.</li> </ol> <p>And returns output in one of the following formats:</p> <ol> <li>Refined tree file : Tree file describing the output refined tree.</li> <li>Vertex labeling file : Labeling file describing the vertex labeling of the refined tree. Labels designate the anatomical location of each node.</li> <li>Refined tree DOT : Refined tree with vertex labeling in DOT format.</li> <li>Migration graph file : Multi-graph file describing the migration graph.</li> <li>Migration graph DOT : Migration graph in DOT format.</li> </ol>"},{"location":"feature/#mach2-viz-features","title":"MACH2-Viz Features","text":"<p>MACH2-Viz is an interactive visualizer that allows the user to explore migration patters inferred by MACH2. It has the following features.</p> <ul> <li>Highlight corresponding nodes: The user can highlight nodes in the clonal tree or migration graph, and nodes in the corresponding structure will highlight as well.</li> <li>Compare solutions: Users can open solutions side by side and compare them.</li> <li>Require or omit migrations: A summary panel can be opened and migration edges can be required or omitted from the list of solutions displayed.</li> <li>Examine polytomy refinement: The input clonal phylogeny can be compared against the refined phylogeny and corresponding nodes can be panned to and comapred.</li> <li>Extensibility: Users can upload their own solutions or make contributions to the home page table of example solutions.</li> <li>Backwards compatibility: Solutions from MACHINA (2018) can also be loaded into the visualizer.</li> </ul>"},{"location":"installation/","title":"Installation Guide","text":""},{"location":"installation/#prerequisites","title":"Prerequisites","text":"<ul> <li>Python - <code>MACH2</code> requires Python 3.7 or newer.</li> <li>ILP solver - <code>MACH2</code> requires an ILP solver installed to solve PMH-TR. Currently <code>MACH2</code> only supports <code>Gurobi optimizer</code>, but we are going to add support for more ILP solvers in the future. <code>MACH2</code> requires a valid Gurobi installation and license key. The location of Gurobi should be present in <code>LD_LIBRARY_PATH</code> (linux) and <code>DYLD_LIBRARY_PATH</code> (macOS) the license key should be saved in the environment variable <code>GRB_LICENSE_KEY</code>.</li> </ul>"},{"location":"installation/#installing-mach2","title":"Installing MACH2","text":"<p>MACH2 can be installed using the following command:</p> <pre><code>pip install mach2 &amp;&amp; pip install mach2[jupyter]\n</code></pre>"},{"location":"installation/#mach2-viz","title":"MACH2-Viz","text":"<p>MACH2-Viz can simply be opened with the following link. However, there is a Python package that allows for opening MACH2-Viz in localhost directly from a Python script or Jupyter Notebook.  </p> <p>The package will be installed as a dependency when MACH2 is installed, but to install the Python package for MACH2-Viz alone, run:</p> <pre><code>pip install mach2-viz\n</code></pre>"},{"location":"quickstart/","title":"Quick Start","text":"<p>NOTE: This tutorial is better followed on a Jupyter Notebook. To use a Jupyter notebook, be sure to install MACH2 for Jupyter Notebook.</p> <p>Now that you have MACH2 and MACH2-Viz set up, you can run the following on this example dataset.</p> <ul> <li>patient1.tree</li> <li>patient1.labeling</li> </ul>"},{"location":"quickstart/#input-description","title":"Input Description","text":"<p><code>patient1.tree</code> is the edgelist of the clone phylogeny to be labeled by MACH2, and <code>patient1.labeling</code> is a labeling of extant nodes (otherwise known as the leaves of the phylogeny) designating an anatomical location for these clones. As you can see, these are in tsv format, as columns can be separated by tabs or spaces.</p>"},{"location":"quickstart/#visualizing-the-tree","title":"Visualizing the Tree","text":"<p>We visualize the tree through the following lines of Python code:</p> <p><code>In[1]:</code></p> <pre><code>import mach2\ntree = mach2.Phylogeny.from_file('patient1.tree', 'patient1.labeling')\ntree\n</code></pre> <p><code>Out[1]</code>:</p> <p></p>"},{"location":"quickstart/#computing-a-full-labeling","title":"Computing a Full Labeling","text":"<p>NOTE: Computing a full labeling using MACH2 requires an ILP solver such as Gurobi, make sure to have it installed.</p> <p>To solve the PMH-TR (Parsimonious Migration History with Tree Resolution) problem, you can run the following code:</p> <p><code>In[2]</code>:</p> <pre><code>solver = mach2.MACH(tree, primary_site='LOv')\nsolutions = solver.solve('gurobi', 30, n_threads=30)\n</code></pre> <p><code>Out[2]</code>:</p> <pre><code>Set parameter MIPGap to value 0\nSet parameter PoolSolutions to value 30\nSet parameter PoolSearchMode to value 2\nSet parameter Threads to value 30\n</code></pre>"},{"location":"quickstart/#visualizing-solutions","title":"Visualizing Solutions","text":"<p>You can visualize solutions using class methods in MACH2's library. Let's visualize the first solution returned by MACH2:</p>"},{"location":"quickstart/#visualizing-the-clone-tree","title":"Visualizing the Clone Tree","text":"<p><code>In[3]</code></p> <pre><code>solutions[0].phylogeny\n</code></pre> <p><code>Out[3]</code></p> <p></p>"},{"location":"quickstart/#visualizing-the-migration-graph","title":"Visualizing the Migration Graph","text":"<p><code>In[4]</code></p> <pre><code>solutions[0].migration_graph\n</code></pre> <p><code>Out[4]</code></p> <p></p>"},{"location":"quickstart/#opening-mach2-viz","title":"Opening MACH2-Viz","text":"<p>MACH2-Viz can be opened directly from the Jupyter Notebook via localhost through the following code</p> <p><code>In[5]</code></p> <pre><code>solutions.open_in_viz()\n</code></pre> <p>A browser window should open and display an interactive visualization of the solution space.</p>"},{"location":"tutorial/","title":"MACH2/MACH2-Viz Documentation","text":""},{"location":"tutorial/#documentation","title":"Documentation","text":"<p>To get started, see the quick start tutorial. Then, view the documentation below.</p>"},{"location":"tutorial/#mach2-documentation","title":"MACH2 Documentation","text":"<ul> <li>Input Files</li> <li>Command Line Usage</li> <li>Python API Usage<ul> <li>MACH</li> <li>MigrationGraph</li> <li>Phylogeny</li> <li>RefinedPhylogeny</li> <li>SolutionSet</li> <li>Solution</li> </ul> </li> </ul>"},{"location":"tutorial/#mach2-viz-documentation","title":"MACH2-Viz Documentation","text":"<ul> <li>Getting Started</li> <li>Data Preparation</li> <li>Navigating the Visualizer</li> <li>Comparing Solutions</li> <li>Summary View</li> </ul>"},{"location":"docs/cmdline/","title":"MACH2 Command Line Usage","text":"<p>(Back)</p> <p>Along with the Jupyter Notebook/Python API usage described in the quick start guide, MACH2 can be run in command line in all platforms with Python installed.</p>"},{"location":"docs/cmdline/#input","title":"Input","text":"<p>To run MACH2 in command line, you will need the following files:</p> <ul> <li>Input tree file: Tree file describing the input clone tree. This is an edgelist file that follows a tsv format. (Example)</li> <li>Leaf labeling file: Labeling file describing the leaf labeling of input clone tree. It is in the form of a two-column csv where the first column is a node id and the second column is an anatomic labeling. (Example)</li> <li>(Optional) Coloring file: An integer mapping for anatomical locations. For visualization purposes. (Example)</li> </ul>"},{"location":"docs/cmdline/#usage","title":"Usage","text":"<pre><code>    usage: mach2 [-h] [-p PRIMARY] [-c COLORMAP] [--log] [-o OUTPUT] [-N NSOLUTIONS] [-C] [-t THREADS] [-s] [-S] clone_tree leaf_labeling\n\n    MACH2\n\n    positional arguments:\n    clone_tree            Input clone tree\n    leaf_labeling         Input leaf labeling\n\n    options:\n    -h, --help            show this help message and exit\n    -p PRIMARY, --primary PRIMARY\n                            Primary anatomical site\n    -c COLORMAP, --colormap COLORMAP\n                            Color map file\n    --log                 Outputs Gurobi logging\n    -o OUTPUT, --output OUTPUT\n                            Output folder\n    -N NSOLUTIONS, --nsolutions NSOLUTIONS\n                            Maximum number of solutions retained\n    -C, --count_solutions\n                            Only prints the number of solutions (default=False)\n    -t THREADS, --threads THREADS\n                            Number of threads\n    -s, --suboptimal      Returns suboptimal solutions without duplicates, may be slow (default=False)\n    -S, --seeding_sites   Minimizes the number of seeding sites too (default=False)\n</code></pre>"},{"location":"docs/cmdline/#example","title":"Example","text":"<pre><code>mach2 data/mcpherson_2016/patient1.tree data/mcpherson_2016/patient1.labeling -c data/mcpherson_2016/coloring.txt\n</code></pre>"},{"location":"docs/comparison/","title":"Comparing Solutions","text":"<p>(back)</p> <p>When you open up a dual viz by opening up a viz screen and clickingg the <code>+</code> on the right, you will see the following.</p> <p> NOTE: You will initially see two panels with the same solution showing, I had toggled the right-side visualization to get this result.</p>"},{"location":"docs/comparison/#basic-features-of-the-dual-panel-visualization","title":"Basic Features of the Dual-Panel Visualization","text":"<p>All features from the single panel view are per panel in the dual panel view as well. You can switch between solutions and (if the data contains it) input trees. You can drag and alter the viewports, toggle between the input and output trees as well.</p> <p>Moreover, if a node or edge in one panel is hovered over, the corresponding labels and node_ids will hover in the second panel.</p> <p>To exit this view, simply click on the <code>X</code> button on one of the panels and that panel will close out. To view the summary graph along with both of these panels, click the <code>+</code> on the left.</p>"},{"location":"docs/comparison/#polytomy-refinement-visualization","title":"Polytomy Refinement Visualization","text":"<p>If your data has an input tree(s), as well as origin node mappings, they will be reflected in this feature of the visualization. To visualize polytomy mappings:</p> <ul> <li>Have two panels containing solutions with the same input tree open.</li> <li>In one of the panels, toggle to the input tree</li> <li>When you hover over a node in the input tree, the corresponding nodes resulting from a polytomy refinement will highlight in the other panel.</li> <li>Click nodes on either side to pan to corresponding nodes.</li> <li>See the figure below:</li> </ul> <p> In this figure, I have my mouse hovering over the tree node labeled <code>1</code> on the right. We can see that in the panel on the left, the <code>1^breast</code> and <code>1^lung</code> nodes as well as the edge between them are highlighted.</p>"},{"location":"docs/data_preparation/","title":"Data preparation","text":""},{"location":"docs/data_preparation/#preparing-data-for-mach2-viz","title":"Preparing Data for MACH2-Viz","text":"<p>(Back)</p> <p>In this page, we describe how to generate inputs for MACH2-Viz, how to open inputs in the visualizer, and lastly, the description of the inputs.</p>"},{"location":"docs/data_preparation/#creating-inputs-for-viz","title":"Creating Inputs for Viz","text":"<p>Inputs for MACH2-Viz can be created using the following methods. The method used is dependent on the needs of the user.</p> <ul> <li>Create a solution object in the MACH2 API as described in the quick start guide, and then open a localhost visualizer for the data.</li> <li>Export MACH2 to JSON, either via commandline or via the API, then upload it to MACH2-Viz</li> <li>Run MACHINA (2018), and use the json compression application to convert it into an input that is compatible with MACH2-Viz</li> </ul>"},{"location":"docs/data_preparation/#directly-from-mach2-api","title":"Directly from MACH2 API","text":"<p>This method is used if you would rather run MACH2-Viz in localhost, and would not like to use MACH2 via command line to compute solutions. You can open MACH2-Viz directly from the API using the following steps:</p> <ol> <li>Follow the instructions described in the API tutorial</li> <li>Once you have a <code>SolutionSet</code> object, <code>solutions</code>, run <code>solutions.open_in_viz()</code></li> </ol>"},{"location":"docs/data_preparation/#generating-a-json","title":"Generating a JSON","text":"<p>This method is better if you would rather run MACH2 in commandline, or you would like to refrain from running in localhost.</p> <ol> <li>Follow the instructions for running MACH2 in commandline</li> <li>Once you have a JSON file generated, navigate to the Viz homepage</li> <li>Click the <code>+</code> on the bottom right, and upload your JSON, the visualizer window will open.</li> </ol>"},{"location":"docs/data_preparation/#from-machina","title":"From MACHINA","text":"<p>This method is preferred if you have solutions generated from MACHINA, and you do not have the JSON formatting that is automatically done with MACH2. To generate inputs for MACH2-Viz using MACHINA outputs, do the following:</p> <ol> <li>Run MACHINA to generate outputs.</li> <li>In a command line, navigate to a preferred directory and run the following commands. Replace <code>&lt;MACHINA output directory&gt;</code> with the folder name of the MACHINA output.</li> </ol> <pre><code>git clone https://github.com/vikramr2/json_compression.git\ncd json_compression &amp;&amp; ./install.sh\n./run.sh &lt;MACHINA output directory&gt;\n</code></pre> <p>You should then have a JSON that is compatible with MACH2-Viz. Then, open the home page of MACH2-Viz and upload the file.</p>"},{"location":"docs/data_preparation/#general-format","title":"General format","text":"<p>JSON uploaded to MACH2-Viz has the following general format:</p> <pre><code>{\n    \"name\": \"example\",\n    \"original\": [\n        {\n            \"name\": \"\", // (1)\n            \"tree\": [\n                [\"5\", \"8\"],\n                // (2)\n            ],\n            \"labeling\": [\n                [\"8\", \"breast\"],\n                // (3)\n            ],\n            \"solution_names\": [\n                \"soln_name1\",\n                // (4)\n            ]\n        }\n    ],\n    \"solutions\": [\n        {\n            \"name\": \"soln_name1\",\n            \"tree\": [\n                [\n                    \"u\",\n                    \"v\",\n                    2 // (5)\n                ],\n                [\n                    \"v\",\n                    \"w\" // (6)\n                ]\n                // ...\n            ],\n            \"labeling\": [\n                [\"u\", \"u_label\"],\n                [\"v\", \"v_label\"],\n                // ...\n            ],\n            \"migration\": [\n                [\n                    \"u_label\",\n                    \"v_label\"\n                    2 // (7)\n                ],\n            ]\n        },\n        // ...\n    ],\n    \"summary\": [\n        [\n            \"u_label\",\n            \"v_label\",\n            3 // (8)\n        ]\n    ]\n}\n</code></pre> <ol> <li>Naming can be arbitrary. Just make sure it's relevant to the dataset (perhaps mentioning the type of cancer or the patient ID)</li> <li>This is the edgelist of the input clone tree</li> <li>This is a per-clone assignment of anatomical locations. The only requirement for input trees is that the leaves must be labeled.</li> <li>The corresponding solution names to this input tree</li> <li>Optionally, output trees can be temporally labeled with integer timestamps. See the following API method for labeling timestamps in the solution.</li> <li>Timestamps however aren't necessary to be loaded into MACH2-Viz. MACH2-Viz currently doesn't support visualizing temporality of metastasis, but we hope to add support for it soon.</li> <li>Timestamps can optionally be specified for migration graphs.</li> <li>This weight is marked by the number of occurences of this migration across the full solution space.</li> </ol>"},{"location":"docs/data_preparation/#required-field-descriptions","title":"Required Field Descriptions","text":"<p>MACH2-Viz has support for visualizing many different aspects of the input data, but many of the fields above are optional. The required fields are listed below.</p> <ul> <li><code>\"name\" (string)</code>: The name of the patient</li> <li><code>\"solutions\" (list)</code>: The list of solutions. Each solution is an object with the following fields:</li> <li><code>\"name\" (string)</code>: The name of the solution</li> <li><code>\"tree\" (list)</code>: The clonal tree topology. This is an edge-list where each node is a string id of a clone.</li> <li><code>\"labeling\" (list)</code>: This is an array where each element is a pair of two (a 2-array) with the format [node, label]. This is a mapping between the clone id and its anatomical location.</li> <li><code>\"migration\" (list)</code>: This is the edge-list of the migration graph. Each edge goes from an anatomical site to another anatomical site.</li> <li><code>\"summary\" (list)</code>: This is a weighted edge list. Each edge goes from anatomical site to another anatomical site, and the weightage is the number of solutions this edge appears in.</li> </ul> <p>These are the required parameters for which an input for the MACH2-Viz should have at the minimum. For more in depth visualizations, there are optional parameters that can be included in the dataset.</p>"},{"location":"docs/inputs/","title":"Inputs","text":""},{"location":"docs/inputs/#input-files","title":"Input Files","text":"<p>(Back)</p>"},{"location":"docs/inputs/#tree-file","title":"Tree File","text":"<p>MACH2 requires a file describing the input clonal phylogeny. This is in the form of an edgelist describing a tree (this means that there must not be multiple components or cycles in the edgelist). This is in a tsv formatted file with two columns. Entries are separated by spaces. See the example below:</p> <pre><code>A A1\nA A2\nA A3\nA A4\nA A5\nA A6\nB B1\nB B2\nB B3\nB B4\nB B5\nD D1\nF F1\nH H1\nH H2\nA B\nA D\nB C1\nD F\nD E1\nF H\nF G1\nH I1\n</code></pre> <p>(McPherson 2016, Ovarian Cancer)</p>"},{"location":"docs/inputs/#labeling-file","title":"Labeling File","text":"<p>MACH2 also requires a file that labels extant nodes (otherwise known as the leaves) of the phylogenetic tree. This is a two column dataset where elements in the same row are separated by spaces (similar to a tsv). Column 1 is the node id in the phylogeny and Column 2 is the anatomical labeling. See below for an example:</p> <pre><code>A1 Om\nA2 SBwl\nA3 LFTB\nA4 LOv\nA5 ApC\nA6 RFTA\nB1 Om\nB2 SBwl\nB3 LFTB\nB4 LOv\nB5 ApC\nC1 SBwl\nD1 LOv\nE1 ROv\nF1 ROv\nG1 ROv\nH1 ROv\nH2 LOv\nI1 ROv\n</code></pre>"},{"location":"docs/inputs/#optional-coloring-file","title":"(Optional) Coloring File","text":"<p>When running MACH2 from the command line, a coloring file may be used for integer assignments (colors) for anatomical locations. The file looks like the one below. Note how Column 1 contains values from Column 2 of the labelling file.</p> <pre><code>LOv 1\nAdnx 2\nROv 3\nApC 7\nBm 8\nBrn 2\nBwl 7\nCDSB 5\nClnE 9\nLFT 7\nLFTC 7\nLFTB 9\nLPv 7\nOm 8\nRFTA 4\nRPv 4\nRUt 5\nSBwl 5\n</code></pre>"},{"location":"docs/mach2viz_start/","title":"Mach2viz start","text":""},{"location":"docs/mach2viz_start/#getting-started-with-mach2-viz","title":"Getting Started with MACH2-Viz","text":"<p>(Back)</p>"},{"location":"docs/mach2viz_start/#opening-mach2-viz","title":"Opening MACH2-Viz","text":"<p>MACH2-Viz can be opened with the following methods:</p> <ul> <li>Launching the public web app.</li> <li>Via the Python API<ul> <li>To learn how to open MACH2-Viz via the Python API, visit the quick start guide</li> <li>Once you have opened the visualizer, continue straight to navigating the visualizer</li> </ul> </li> </ul>"},{"location":"docs/mach2viz_start/#the-homepage","title":"The Homepage","text":"<p>When MACH2-Viz is first opened via the web app, you will see the following page:</p> <p></p> <p>The homepage of MACH2-Viz. You can view instructions for using the app, view example solutions, or upload your own solutions via the + icon.</p>"},{"location":"docs/mach2viz_start/#loading-an-example-json","title":"Loading an Example JSON","text":"<p>You can select one of the example datasets to visualize from the table on the right-hand side. On the <code>Dataset</code> column, you will see the source of the sample dataset. You can see the sources of the datasets in the bottom of this page.</p> <p>You can click on an entry of the table to load up one of the examples.</p> <p>NOTE: If a dataset has more than 100 solutions, it may be a bit laggy.</p>"},{"location":"docs/mach2viz_start/#uploading-your-own-json","title":"Uploading your own JSON","text":"<p>Click on the <code>+</code> icon at the bottom-right of the page to upload your own JSON. To see documentation on how to write a valid JSON for Mach2-Viz, continue to data preparation.</p>"},{"location":"docs/mach2viz_start/#dataset-sources","title":"Dataset Sources","text":"<ul> <li><code>hoadley_2016</code>: <p>Hoadley KA, Siegel MB, Kanchi KL, Miller CA, Ding L, Zhao W, He X, Parker JS, Wendl MC, Fulton RS, Demeter RT, Wilson RK, Carey LA, Perou CM, Mardis ER. Tumor Evolution in Two Patients with Basal-like Breast Cancer: A Retrospective Genomics Study of Multiple Metastases. PLoS Med. 2016 Dec 6;13(12):e1002174. doi: 10.1371/journal.pmed.1002174. Erratum in: PLoS Med. 2017 Jan 9;14 (1):e1002222. PMID: 27923045; PMCID: PMC5140046.</p> </li> <li><code>gundem_2015</code>: <p>Gundem G, Van Loo P, Kremeyer B, Alexandrov LB, Tubio JMC, Papaemmanuil E, Brewer DS, Kallio HML, H\u00f6gn\u00e4s G, Annala M, Kivinummi K, Goody V, Latimer C, O'Meara S, Dawson KJ, Isaacs W, Emmert-Buck MR, Nykter M, Foster C, Kote-Jarai Z, Easton D, Whitaker HC; ICGC Prostate Group; Neal DE, Cooper CS, Eeles RA, Visakorpi T, Campbell PJ, McDermott U, Wedge DC, Bova GS. The evolutionary history of lethal metastatic prostate cancer. Nature. 2015 Apr 16;520(7547):353-357. doi: 10.1038/nature14347. Epub 2015 Apr 1. Erratum in: Nature. 2020 Aug;584(7820):E18. PMID: 25830880; PMCID: PMC4413032.</p> </li> <li><code>mcpherson_2016</code>: <p>McPherson A, Roth A, Laks E, Masud T, Bashashati A, Zhang AW, Ha G, Biele J, Yap D, Wan A, Prentice LM, Khattra J, Smith MA, Nielsen CB, Mullaly SC, Kalloger S, Karnezis A, Shumansky K, Siu C, Rosner J, Chan HL, Ho J, Melnyk N, Senz J, Yang W, Moore R, Mungall AJ, Marra MA, Bouchard-C\u00f4t\u00e9 A, Gilks CB, Huntsman DG, McAlpine JN, Aparicio S, Shah SP. Divergent modes of clonal spread and intraperitoneal mixing in high-grade serous ovarian cancer. Nat Genet. 2016 Jul;48(7):758-67. doi: 10.1038/ng.3573. Epub 2016 May 16. PMID: 27182968.</p> </li> <li><code>tracerx</code>: <p>\u201cTracking genomic cancer evolution for precision medicine: the lung TRACERx study\u201d, PLoS Biol. July 2014; 12(7):e1001906.</p> </li> </ul>"},{"location":"docs/navigating_viz/","title":"Navigating the Visualizer","text":"<p>When you first open the visualizer, you will see a layout that looks like the following:</p> <p> The basic viz view of MACH2-Viz. Both a clone tree and its corresponding migration graph will display. View more functionality below.</p>"},{"location":"docs/navigating_viz/#basic-functions","title":"Basic Functions","text":"<ul> <li>View migration and comigration numbers. In the top left corner of the migration graph panel, you will see the calculated migration and comigration numbers:</li> <li>\\(\\mu\\): The migration number, the total number of migration events.</li> <li>\\(\\gamma\\): The number of unique migrations, where uniqueness is given by the anatomical locations at which the migration is happening.</li> <li>Toggle the solutions with the dropdown menu in the top left.</li> <li>Zoom, pan, and drag nodes in both the tree and migration graph.</li> <li>Hover corresponding nodes and edges. When you hover over a node or edge in the migration graph, the corresponding edges in the clonal tree will highlight as well. Likewise vice versa.</li> <li>If a node in the migration graph is hovered, all mutations within the hovered location will highlight.</li> <li>If an edge in the migration graph is hovered, all edes between tumor locations will highlight in the clone tree.</li> <li>The same correspondence exists vice versa if a clone tree edge or node is highlighted.</li> <li>Compare solutions by opening up another visualizer window. This can be done by clicking the <code>+</code> bar on the right.</li> <li>View the summary panel. To view a summary graph of all solutions, click the <code>+</code> bar on the left.</li> <li>Though self-explanatory, you can rotate the migration graph, and reset the view if any changes were made on the view (panning, dragging, or dilation). For more information, press the <code>/</code> key for a help popup.</li> </ul> <p> Hover function in the viz. My mouse is hovering over the <code>p.lung</code> node in the migration graph.</p>"},{"location":"docs/navigating_viz/#data-dependent-functions","title":"Data-Dependent Functions","text":"<ul> <li>If you have an input tree in your data</li> <li>There will be an <code>input tree</code> button like in the example above. This will let you toggle between the input tree and the solution tree.</li> <li>If you have multiple input trees</li> <li>You will also be able to select between input trees in the dropdown menu in the top of the window, just like you can in selection between solutions. See the example below.</li> </ul> <p>A viz panel for a dataset with multiple input trees. There is a dropdown for input trees on the top  left, and the unlabeled input tree is displayed on the bottom panel.</p>"},{"location":"docs/python_mach2/","title":"MACH2 Python Usage","text":"<p>(back)</p> <p>Along with running via command line, you can compute migration histories using the Python API. Suppose you have a clone tree file <code>patient.tree</code> and an anatomical labeling of the leaves/extant nodes of the tree <code>patient.labeling</code>. For more information on the input files required for MACH2, see here.</p>"},{"location":"docs/python_mach2/#1-load-the-data","title":"1. Load the Data","text":"<p>Data can be loaded through the following Python code:</p> <pre><code>import mach2\n\ntree = mach2.Phylogeny.from_file('patient.tree', 'patient.labeling') #(1)\n</code></pre> <ol> <li>This line creates a <code>Phylogeny</code> object storing the leaf-labeled tree. In the next section we will solve this tree by labeling the internal nodes.</li> </ol>"},{"location":"docs/python_mach2/#2-compute-the-solution","title":"2. Compute the Solution","text":"<p>This is simply done with the following code:</p> <pre><code>solver = mach2.MACH(tree, primary_site=None)  #(1)\nsolutions = solver.solve('gurobi', 30, n_threads=30) #(2)\n</code></pre> <ol> <li>Optionally, you can specify a primary tumor location in the form of a string. If the primary location is <code>None</code>, then all solutions across multiple possible primary tumor locations will be returned.</li> <li>This creates a <code>SolutionSet</code> object that contains all possible labeled trees. An ILP solver like Gurobi is required to compute these solutions, so be sure to have that installed.</li> </ol>"},{"location":"docs/python_mach2/#3-exporting-solutions","title":"3. Exporting Solutions","text":"<p>Now that you have a Python object storing the solutions, you need to export it to a more readable format. This can be done in the following ways.</p>"},{"location":"docs/python_mach2/#exporting-to-json","title":"Exporting to JSON","text":"<p>This is done with the following line of code. This will result in a JSON similar in format to this example.</p> <pre><code>solutions.json('out.json') #(1)\n</code></pre> <ol> <li>Replace the filename with whatever you want.</li> </ol>"},{"location":"docs/python_mach2/#static-visualization","title":"Static Visualization","text":"<p>If you are using a Jupyter Notebook, you can return static visualizations. You can index into one of the solutions and generate visualizations through the following code.</p> <pre><code>solutions[0].phylogeny #(1)\nsolutions[0].migration_graph\n</code></pre> <ol> <li>Change the index depending on the solution you would like to view. To get the number of solutions simply run <code>len(solutions)</code></li> </ol> <p>This method is shown in this example.</p>"},{"location":"docs/python_mach2/#interactive-visualization-recommended","title":"Interactive Visualization (Recommended)","text":"<p>Interactive visualizations allow for filtration of solutions based on priors such as known migrations or absences of migrations. It also allows for examining polytomy resolution and visualilzation of the entire solution space. To open a visualization directly from Python, run the following snippet of code. You should see a window like this open up.</p> <pre><code>solutions.open_in_viz()\n</code></pre> <p>Alternatively, you can:</p> <ol> <li>Export the solution to JSON file</li> <li>Open the homepage of MACH2-Viz (link)</li> <li>Click the <code>+</code> icon at the bottom right and upload your file.</li> </ol>"},{"location":"docs/python_mach2/#python-api","title":"Python API","text":"<p>These methods are a part of the Python API. Please see the following objects for more information on the API:</p> <ul> <li>MACH</li> <li>MigrationGraph</li> <li>Phylogeny</li> <li>RefinedPhylogeny</li> <li>SolutionSet</li> <li>Solution</li> </ul>"},{"location":"docs/summary/","title":"Summary View","text":"<p>(back)</p> <p>When you open up a sumary panel by clicking the <code>+</code> bar on the left from either a single or dual panel viz, you will see one of the screens below:</p> <p> Summary panel views in MACH2-Viz. To enter the three panel view (bottom) from the dual summary panel view (top). Simply click the <code>+</code> bar in the right.</p>"},{"location":"docs/summary/#basic-functionality","title":"Basic Functionality","text":"<p>You can perform the single and double panel functions as normal with the solution solution panel(s) in the right.</p>"},{"location":"docs/summary/#the-summary-graph","title":"The Summary Graph","text":"<p>The summary graph is a collection of all solutions' migration graphs unioned into a single graph. Each edge is a migration that exists somewhere in the provided solution space, and each edge is weighted by the number of solutions the migration appears in.</p> <p>In the top left corner of the summary graph panel, you will see the number of available solutions. Any edit on the graph can be reset using the <code>reset</code> button.</p> <p>You can hover over nodes and edges in the summary graph and see highlighting correspondence in the individual solutions in the panel(s) on the right. Vice versa, if you hover over nodes and edges in the individual solutions, you will see highlighting correspondence in the summary graph.</p> <p> My mouse is hovering over the <code>lung</code> node in the summary graph. The corresponding nodes and edges are highlighting on the right side as well.</p>"},{"location":"docs/summary/#constraining-the-solution-space","title":"Constraining the Solution Space","text":"<p>Suppose, due to some clinical data, we are certain that a migration from <code>lung</code> to <code>liver</code> occured, but we are also certain that a migration from <code>kidney</code> to <code>liver</code> couldn't have happened. To address this, we need to require an edge and delete an edge from the summary graph.</p> <ul> <li>To require an edge simply click on that edge in the summary graph. We will then click on <code>lung-&gt;liver</code>.</li> <li>To unrequire an edge either click on the edge again, or hit the undo arrow on the top right corner of the summary panel.</li> <li>To delete an edge hold down the shift key so that the cursor changes  and click on that edge in the summary graph. We will then shift-click <code>kidney-&gt;liver</code>.</li> </ul> <p>Notice how the solutions on the right are only selectable between the remaining set after the constraints have been set. Moreover, the solutions number on the top left of the summary panel is set to the number of remaining solutions.</p> <p></p> <p>The constrained graph after requiring <code>lung-&gt;liver</code> and deleting <code>kidney-&gt;liver</code>. Note that there are only 4 solutions left. To undo any changes, either <code>reset</code> or click the undo arrow on the top right.</p>"},{"location":"docs/summary/#multi-rooted-data","title":"Multi-rooted data","text":"<p>If your solution space has multiple possible roots (primary tumors) across all clonal trees, your summary graph will look like the following</p> <p> Multiple roots exist in this dataset, hence the <code>roots</code> node in the summary graph.</p> <p>The <code>roots</code> node points to any node such that it exists as a root of a clone tree somewhere in the solution space. That way, we introduce some more functionality.</p> <ul> <li>Requiring a root: To get all solutions such that only a single selected node roots the trees in the solution space, simply click on the edge going from <code>roots</code> to that node.</li> <li>Deleting a root: To get the complement of the above constraint, the dataset such that any node but the selected one roots clonal trees in the solution space, simply shift-click the same edge.</li> <li>ex. If I only want solutions such that the brain is the primary tumor (eg. the root) then I will just click on <code>roots-&gt;brain</code> above.</li> </ul>"},{"location":"docs/api/mach/","title":"Mach","text":""},{"location":"docs/api/mach/#mach2mach","title":"<code>mach2.MACH</code>","text":"<p>(back)</p> <p>Solver object for MACH2</p>"},{"location":"docs/api/mach/#class-constructor","title":"Class Constructor","text":"<pre><code>mach2.MACH(\n    phylogeny,\n    primary_site=None,\n    suboptimal_mode=False,\n    seeding_site=False,\n    specify_migration_comigration=None,\n    possible_migration_list=None,\n    clones_observed=None)\n</code></pre>"},{"location":"docs/api/mach/#parameters","title":"Parameters","text":"<ul> <li><code>phylogeny (Phylogeny)</code>: The tree with unlabeled internal nodes</li> </ul>"},{"location":"docs/api/mach/#optional","title":"Optional","text":"<ul> <li><code>primary_site (str)</code>: The anatomical location of the primary site.</li> <li><code>suboptimal_mode (bool)</code>: Return suboptimal solutions as well.</li> <li><code>seeding_site (bool)</code>: TODO</li> <li><code>specify_migration_comigration (TODO)</code>: TODO</li> <li><code>possible_migration_list (list)</code>: Array of length-2 arrays containing strings representing anatomical locations. Constrains possible migrations in solution space.</li> <li><code>clones_observed (TODO)</code>: TODO</li> </ul>"},{"location":"docs/api/mach/#methods","title":"Methods","text":""},{"location":"docs/api/mach/#add_polytomy_resolution_compatibility_constraints","title":"<code>add_polytomy_resolution_compatibility_constraints()</code>","text":"<p>Updates the constraints for polytomy resolution.</p>"},{"location":"docs/api/mach/#add_constraints_for_z","title":"<code>add_constraints_for_z()</code>","text":"<p>TODO</p>"},{"location":"docs/api/mach/#add_constraints_for_z_b_r_suboptimal","title":"<code>add_constraints_for_z_b_R_suboptimal()</code>","text":"<p>TODO</p>"},{"location":"docs/api/mach/#add_constraints_for_q","title":"<code>add_constraints_for_q()</code>","text":"<p>TODO</p>"},{"location":"docs/api/mach/#add_constraints_for_q_suboptimal","title":"<code>add_constraints_for_q_suboptimal()</code>","text":"<p>TODO</p>"},{"location":"docs/api/mach/#add_constraints_binary","title":"<code>add_constraints_binary()</code>","text":"<p>TODO</p>"},{"location":"docs/api/mach/#add_primary_site_constraintsprimary_site","title":"<code>add_primary_site_constraints(primary_site)</code>","text":"<p>Dynamically the constraint on primary tumor location.</p>"},{"location":"docs/api/mach/#parameters_1","title":"Parameters","text":"<ul> <li><code>primary_site (str)</code>: Location of the primary tumor</li> </ul>"},{"location":"docs/api/mach/#add_contraints_specifying_mig_comig","title":"<code>add_contraints_specifying_mig_comig()</code>","text":"<p>TODO</p>"},{"location":"docs/api/mach/#solvesolver-nsolutions-logfile-n_threads0-rawfalse","title":"<code>solve(solver, nSolutions, logfile='', n_threads=0, raw=False)</code>","text":"<p>Solves the Parsimonious Migration History problem with Tree Resolution (PMH-TR) given the conditions specified in the class parameters.</p>"},{"location":"docs/api/mach/#parameters_2","title":"Parameters","text":"<ul> <li><code>solver (str)</code>: ILP solver to use. We currently only support Gurobi (<code>\"gurobi\"</code>), and hope to add support for more ILP solvers in the future.</li> <li><code>nSolutions (int)</code>: The number of solutions returned by MACH2</li> <li><code>n_threads (int)</code>: Number of threads to run in parallel.</li> <li><code>raw (bool/object)</code>: Raw data describing the solution set. If the user just needs to cast the solution data, then raw data can be passed in without necessarily running MACH2</li> </ul>"},{"location":"docs/api/migrationgraph/","title":"Migrationgraph","text":""},{"location":"docs/api/migrationgraph/#mach2migrationgraph","title":"<code>mach2.MigrationGraph</code>","text":"<p>(back)</p> <p>Data structure containing the migration graph.</p>"},{"location":"docs/api/migrationgraph/#constructor","title":"Constructor","text":"<pre><code>mach2.MigrationGraph(raw)\n</code></pre>"},{"location":"docs/api/migrationgraph/#parameters","title":"Parameters","text":"<ul> <li><code>raw</code>: Raw data describing the migration graph</li> </ul>"},{"location":"docs/api/migrationgraph/#methods","title":"Methods","text":""},{"location":"docs/api/migrationgraph/#has_migrationa-b-bool","title":"<code>has_migration(a, b)</code> (bool)","text":"<p>Returns whether a migration exists in the graph</p>"},{"location":"docs/api/migrationgraph/#parameters_1","title":"Parameters","text":"<ul> <li><code>a (str)</code>: Anatomical location where the migration is from</li> <li><code>b (str)</code>: Anatomical location where the migration is to</li> </ul>"},{"location":"docs/api/migrationgraph/#n_migrationsa-b-int","title":"<code>n_migrations(a, b)</code> (int)","text":"<p>Returns the number of such migrations that exist</p>"},{"location":"docs/api/migrationgraph/#parameters_2","title":"Parameters","text":"<ul> <li><code>a (str)</code>: Anatomical location where the migration is from</li> <li><code>b (str)</code>: Anatomical location where the migration is to</li> </ul>"},{"location":"docs/api/migrationgraph/#migration_edges-list","title":"<code>migration_edges()</code> (list)","text":"<p>Returns the number of edges in the migration graph.</p>"},{"location":"docs/api/migrationgraph/#migration_pattern-str","title":"<code>migration_pattern()</code> (str)","text":"<p>Returns the migration pattern shown in the graph as described by El-Kebir et. al. (2018) (<code>'m'</code>, <code>'p'</code>, <code>'S'</code>, <code>'M'</code>, <code>'R'</code>)</p>"},{"location":"docs/api/migrationgraph/#write_graphfilename","title":"<code>write_graph(filename)</code>","text":"<p>Writes the graph into an edgelist format where rows are separated by spaces.</p>"},{"location":"docs/api/migrationgraph/#parameters_3","title":"Parameters","text":"<ul> <li><code>filename (str)</code>: File being written to</li> </ul>"},{"location":"docs/api/migrationgraph/#drawcolormapnone-colormap_filenone-graphvizdigraph","title":"<code>draw(colormap=None, colormap_file=None)</code> (graphviz.DiGraph)","text":"<p>Constructs a visualization object of the migration graph</p>"},{"location":"docs/api/migrationgraph/#parameters_4","title":"Parameters","text":"<ul> <li><code>colormap (dict)</code>: Dictionary mapping node ids to colors</li> <li><code>colormap_file (str)</code>: Filename of a color mapping</li> </ul>"},{"location":"docs/api/migrationgraph/#write_dotcolormapnone-colormap_filenone","title":"<code>write_dot(colormap=None, colormap_file=None)</code>","text":"<p>Create a graph vizualization in DOT file format</p>"},{"location":"docs/api/migrationgraph/#parameters_5","title":"Parameters","text":"<ul> <li><code>colormap (dict)</code>: Dictionary mapping node ids to colors</li> <li><code>colormap_file (str)</code>: Filename of a color mapping</li> </ul>"},{"location":"docs/api/phylogeny/","title":"Phylogeny","text":""},{"location":"docs/api/phylogeny/#mach2phylogeny","title":"<code>mach2.Phylogeny</code>","text":"<p>(back)</p> <p>Data structure containing the clone phylogeny with only leaf-labelings (i.e. the input tree).</p>"},{"location":"docs/api/phylogeny/#constructor","title":"Constructor","text":"<pre><code>mach2.Phylogeny(edges, labels, colormap = None)\n</code></pre>"},{"location":"docs/api/phylogeny/#parameters","title":"Parameters","text":"<ul> <li><code>edges (list[tuple[str, str]])</code>: The edgelist of the phylogeny</li> <li><code>labels (dict[str, str])</code>: The labeling of the leaves</li> </ul>"},{"location":"docs/api/phylogeny/#optional","title":"Optional","text":"<ul> <li><code>colormap (dict[str, int])</code>: Mapping of node ids to color indices</li> </ul>"},{"location":"docs/api/phylogeny/#methods","title":"Methods","text":""},{"location":"docs/api/phylogeny/#from_filephylogeny_filename-labeling_filename-colormap_filenone","title":"<code>from_file(phylogeny_filename, labeling_filename, colormap_file=None)</code>","text":"<p>Returns a phylogeny constructed from edgelist and labeling files. Files are described here.</p>"},{"location":"docs/api/phylogeny/#parameters_1","title":"Parameters","text":"<ul> <li><code>phylogeny_filename (str)</code>: The filename of the edgelist</li> <li><code>labeling_filename (str)</code>: The labeling filename</li> <li><code>colormap_file (str)</code>: The color map filename</li> </ul>"},{"location":"docs/api/phylogeny/#from_pandasphylogeny_df-labeling_df","title":"<code>from_pandas(phylogeny_df, labeling_df)</code>","text":"<p>Similarly, constructs a phylogeny from an edgelist and labeling Pandas 2-column dataframes.</p>"},{"location":"docs/api/phylogeny/#parameters_2","title":"Parameters","text":"<ul> <li><code>phylogeny_filename (str)</code>: The dataframe of the edgelist</li> <li><code>labeling_filename (str)</code>: The labeling dataframe</li> </ul>"},{"location":"docs/api/phylogeny/#get_labelnode-str","title":"<code>get_label(node)</code> (str)","text":"<p>Returns the anatomical location of a node. Throws a <code>ValueError</code> if the node is unlabeled.</p>"},{"location":"docs/api/phylogeny/#parameters_3","title":"Parameters","text":"<ul> <li><code>node (str)</code>: The node id in the phylogeny</li> </ul>"},{"location":"docs/api/phylogeny/#get_parent_arcnode-tuplestr-str","title":"<code>get_parent_arc(node)</code> (tuple[str, str])","text":"<p>Returns the parent edge leading to the node <code>(parent_id, node_id)</code>.</p>"},{"location":"docs/api/phylogeny/#parameters_4","title":"Parameters","text":"<ul> <li><code>node (str)</code>: The node id in the phylogeny</li> </ul>"},{"location":"docs/api/phylogeny/#get_children_arcsnode-listtuplestr-str","title":"<code>get_children_arcs(node)</code> (list[tuple[str, str]])","text":"<p>Get edges going to children nodes.</p>"},{"location":"docs/api/phylogeny/#parameters_5","title":"Parameters","text":"<ul> <li><code>node (str)</code>: The node id in the phylogeny</li> </ul>"},{"location":"docs/api/phylogeny/#write_treefilename","title":"<code>write_tree(filename)</code>","text":"<p>Write the tree to an edgelist file</p>"},{"location":"docs/api/phylogeny/#parameters_6","title":"Parameters","text":"<ul> <li><code>filename (str)</code> The name of the file being written to</li> </ul>"},{"location":"docs/api/phylogeny/#write_labelingfilename","title":"<code>write_labeling(filename)</code>","text":"<p>Write the node labeling to file (of nodes that have labelings)</p>"},{"location":"docs/api/phylogeny/#parameters_7","title":"Parameters","text":"<ul> <li><code>filename (str)</code> The name of the file being written to</li> </ul>"},{"location":"docs/api/phylogeny/#write_dotfilename-colormapnone-colormap_filenone","title":"<code>write_dot(filename, colormap=None, colormap_file=None)</code>","text":"<p>Write a DOT format visualization of the tree.</p>"},{"location":"docs/api/phylogeny/#parameters_8","title":"Parameters","text":"<ul> <li><code>filename (str)</code>: The name of the file being written to</li> <li><code>colormap (dict[str, int])</code>: A mapping between anatomic label to color index</li> <li><code>colormap_file (str)</code>: The coloring file, if a file is being passed instead of colormap data</li> </ul>"},{"location":"docs/api/phylogeny/#drawcolormap-colormap_file-graphvizdigraph","title":"<code>draw(colormap, colormap_file)</code> (graphviz.DiGraph)","text":"<p>Returns a visualization object of the phylogeny</p>"},{"location":"docs/api/phylogeny/#parameters_9","title":"Parameters","text":"<ul> <li><code>colormap (dict[str, int])</code>: A mapping between anatomic label to color index</li> <li><code>colormap_file (str)</code>: The coloring file, if a file is being passed instead of colormap data</li> </ul>"},{"location":"docs/api/refinedphylogeny/","title":"Refinedphylogeny","text":""},{"location":"docs/api/refinedphylogeny/#mach2refinedphylogeny","title":"<code>mach2.RefinedPhylogeny</code>","text":"<p>(back)</p> <p>Data structure containing the clone phylogeny with a full labeling and polytomy resolution (i.e. the output tree).</p> <p>NOTE: <code>RefinedPhylogeny</code> inherits the <code>Phylogeny</code> object, so public methods from <code>Phylogeny</code> are callable from <code>RefinedPhylogeny</code> as well.</p>"},{"location":"docs/api/refinedphylogeny/#constructor","title":"Constructor","text":"<pre><code>mach2.RefinedPhylogeny(phylogeny, raw)\n</code></pre>"},{"location":"docs/api/refinedphylogeny/#parameters","title":"Parameters","text":"<ul> <li><code>phylogeny (mach2.Phylogeny)</code>: Phylogeny before refinement</li> <li><code>raw (dict)</code>: Raw solutions returned by <code>MACH.solve()</code></li> </ul>"},{"location":"docs/api/refinedphylogeny/#methods","title":"Methods","text":""},{"location":"docs/api/refinedphylogeny/#infer_timestamps","title":"<code>infer_timestamps()</code>","text":"<p>Infers temporal integer labelings for when the mutated clone arose. Each clone is labeled with a natural number where a higher number means that the clone arose later in time.</p>"},{"location":"docs/api/refinedphylogeny/#write_treefilename","title":"<code>write_tree(filename)</code>","text":"<p>Write the tree to an edgelist file</p>"},{"location":"docs/api/refinedphylogeny/#parameters_1","title":"Parameters","text":"<ul> <li><code>filename (str)</code> The name of the file being written to</li> </ul>"},{"location":"docs/api/refinedphylogeny/#write_labelingfilename","title":"<code>write_labeling(filename)</code>","text":"<p>Write the node labeling to file</p>"},{"location":"docs/api/refinedphylogeny/#parameters_2","title":"Parameters","text":"<ul> <li><code>filename (str)</code> The name of the file being written to</li> </ul>"},{"location":"docs/api/refinedphylogeny/#write_dotfilename-colormapnone-colormap_filenone","title":"<code>write_dot(filename, colormap=None, colormap_file=None)</code>","text":"<p>Write a DOT format visualization of the tree.</p>"},{"location":"docs/api/refinedphylogeny/#parameters_3","title":"Parameters","text":"<ul> <li><code>filename (str)</code>: The name of the file being written to</li> <li><code>colormap (dict[str, int])</code>: A mapping between anatomic label to color index</li> <li><code>colormap_file (str)</code>: The coloring file, if a file is being passed instead of colormap data</li> </ul>"},{"location":"docs/api/refinedphylogeny/#drawcolormap-colormap_file-graphvizdigraph","title":"<code>draw(colormap, colormap_file)</code> (graphviz.DiGraph)","text":"<p>Returns a visualization object of the phylogeny</p>"},{"location":"docs/api/refinedphylogeny/#parameters_4","title":"Parameters","text":"<ul> <li><code>colormap (dict[str, int])</code>: A mapping between anatomic label to color index</li> <li><code>colormap_file (str)</code>: The coloring file, if a file is being passed instead of colormap data</li> </ul>"},{"location":"docs/api/solution/","title":"<code>mach2.SolutionSet.Solution</code>","text":"<p>(back)</p> <p>A single solution object contained within the <code>mach2.SolutionSet</code> object. This contains a refined and labeled phylogeny, and a migration graph.</p>"},{"location":"docs/api/solution/#constructor","title":"Constructor","text":"<pre><code>mach2.SolutionSet.Solution(tree, graph)\n</code></pre>"},{"location":"docs/api/solution/#parameters","title":"Parameters","text":"<ul> <li><code>tree ([mach2.RefinedPhylogeny)</code>: The refined phylogeny in the solution</li> <li><code>graph (mach2.MigrationGraph)</code>: The computed migration graph</li> </ul>"},{"location":"docs/api/solutionset/","title":"Solutionset","text":""},{"location":"docs/api/solutionset/#mach2solutionset","title":"<code>mach2.SolutionSet</code>","text":"<p>(back)</p> <p>Object containg a set of solutions (a refined phylogeny and a migration graph). This is returned by <code>mach2.MACH.solve</code>.</p>"},{"location":"docs/api/solutionset/#constructor","title":"Constructor","text":"<pre><code>mach2.SolutionSet(sol_list)\n</code></pre>"},{"location":"docs/api/solutionset/#parameters","title":"Parameters","text":"<ul> <li><code>sol_list (list[tuple[mach2.RefinedPhylogeny, mach2.MigrationGraph]])</code>: The list of solutions to PMH-TR.</li> </ul>"},{"location":"docs/api/solutionset/#methods","title":"Methods","text":""},{"location":"docs/api/solutionset/#__len__","title":"<code>__len__()</code>","text":"<p>In order to get the number of solutions, use <code>len(solutions)</code></p>"},{"location":"docs/api/solutionset/#__getitem__key","title":"<code>__getitem__(key)</code>","text":"<p>To index into a solution, use <code>solutions[key]</code></p>"},{"location":"docs/api/solutionset/#co_occurence_table-pandasdataframe","title":"<code>co_occurence_table()</code> (pandas.DataFrame)","text":"<p>Returns a heatmap of the frequency of migrations that were in co-migrations together.</p>"},{"location":"docs/api/solutionset/#compute_summaryprimarynone-collectionsdefaultdict","title":"<code>compute_summary(primary=None)</code> (collections.defaultdict)","text":"<p>Returns a summary migration graph, unioning edges across the solutions.</p>"},{"location":"docs/api/solutionset/#parameters_1","title":"Parameters","text":"<ul> <li><code>primary (str)</code>: Specify a primary argument if you would like to constrain solutions from a single primary tumor location.</li> </ul>"},{"location":"docs/api/solutionset/#summaryself-primarynone-colormapnone-colormap_filenone-consider_multi_edgesfalse-dottrue-graphvizdigraph-collectionsdefaultdict","title":"<code>summary(self, primary=None, colormap=None, colormap_file=None, consider_multi_edges=False, dot=True)</code> (graphviz.DiGraph | collections.defaultdict)","text":"<p>A packaged method that either returns a DOT visualization of the summary graph, or the dictionary representing a summary graph.</p>"},{"location":"docs/api/solutionset/#parameters_2","title":"Parameters","text":"<ul> <li><code>primary (str)</code>: Specify a primary argument if you would like to constrain solutions from a single primary tumor location.</li> <li><code>colormap (dict[str, int])</code>: A mapping between anatomic label to color index</li> <li><code>colormap_file (str)</code>: The coloring file, if a file is being passed instead of colormap data</li> <li><code>consider_multi_edges (bool)</code>: Also union parallel edges that distinguish migration events at different times, but from the same locations</li> <li><code>dot (bool)</code>: Return a dot visualization, and not a dictionary. If <code>False</code>, a <code>collections.defaultdict</code> will be returned.</li> </ul>"},{"location":"docs/api/solutionset/#summary_dotfilename-primarynone-colormapnone-colormap_filenone-consider_multi_edgesfalse","title":"<code>summary_dot(filename, primary=None, colormap=None, colormap_file=None, consider_multi_edges=False)</code>","text":"<p>Returns a DOT visualization of the summary graph</p>"},{"location":"docs/api/solutionset/#parameters_3","title":"Parameters","text":"<ul> <li><code>filename (str)</code>: The name of the file being written to</li> <li><code>primary (str)</code>: Specify a primary argument if you would like to constrain solutions from a single primary tumor location.</li> <li><code>colormap (dict[str, int])</code>: A mapping between anatomic label to color index</li> <li><code>colormap_file (str)</code>: The coloring file, if a file is being passed instead of colormap data</li> <li><code>consider_multi_edges (bool)</code>: Also union parallel edges that distinguish migration events at different times, but from the same locations</li> </ul>"},{"location":"docs/api/solutionset/#jsonname-dict","title":"<code>json(name='')</code> (dict)","text":"<p>Returns a json object representing the solutions returned.</p>"},{"location":"docs/api/solutionset/#parameters_4","title":"Parameters","text":"<ul> <li><code>name (str)</code>: Name of the solution set returned. Ex. <code>patient1</code></li> </ul>"},{"location":"docs/api/solutionset/#write_jsonname-filenamenone","title":"<code>write_json(name='', filename=None)</code>","text":"<p>Write json object representing the solutions returned to file</p>"},{"location":"docs/api/solutionset/#parameters_5","title":"Parameters","text":"<ul> <li><code>name (str)</code>: Name of the solution set returned. Ex. <code>patient1</code></li> <li><code>filename (str)</code>: The name of the file being written to</li> </ul>"},{"location":"docs/api/solutionset/#open_in_viz","title":"<code>open_in_viz()</code>","text":"<p>Open the solution space in MACH2-Viz</p>"}]}